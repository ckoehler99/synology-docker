version: "3"
services:

  influxdb:
    container_name: influxdb
    image: influxdb:2.4.0
    ports:
      - 8086:8086
    volumes:
      - /volume1/docker/influxdb/data:/var/lib/influxdb2
    user: root
    restart: always
    logging:
      driver: loki
      options:
        loki-url: "http://diskstation:3100/loki/api/v1/push"

  node-exporter:
    container_name: node-exporter
    image: prom/node-exporter:latest
    ports:
      - 9100:9100
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    user: root
    command: 
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    labels:
      org.label-schema.group: "monitoring"
    logging:
      driver: loki
      options:
        loki-url: "http://diskstation:3100/loki/api/v1/push"
    networks:
      - monitoring   

  grafana:
    container_name: grafana
    image: grafana/grafana-oss:latest
    depends_on: 
      - influxdb
      - loki
    ports:
      - 3000:3000
    volumes:
      - /volume1/docker/grafana/config:/etc/grafana
      - /volume1/docker/grafana/data:/var/lib/grafana
    user: root
    restart: always
    logging:
      driver: loki
      options:
        loki-url: "http://diskstation:3100/loki/api/v1/push"
    networks:
      - monitoring    

  loki:
    container_name: loki
    image: grafana/loki:latest
    depends_on: 
      - promtail
    ports:
      - 3100:3100
    command: -config.file=/mnt/config/loki-config.yaml
    user: root
    restart: always
    volumes:
      - /volume1/docker/loki/config:/mnt/config
      - /volume1/docker/loki/data:/tmp/loki
    networks:
      - monitoring
    logging:
      driver: loki
      options:
        loki-url: "http://diskstation:3100/loki/api/v1/push"

  promtail:
    container_name: promtail
    image: grafana/promtail:latest
    user: root
    restart: always
    ports:
      - 1514:1514/udp
      - 1514:1514/tcp
      - 9080:9080
    volumes:
      - /var/log:/var/log
      - /volume1/docker/promtail:/config
      - /volume1/@docker:/var/lib/docker 
    command: -config.file=/config/config.yml
    networks:
      - monitoring
    logging:
      driver: loki
      options:
        loki-url: "http://diskstation:3100/loki/api/v1/push"

  telegraf:
    container_name: telegraf
    image: telegraf
    user: root
    restart: always
    links:
      - influxdb
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - /volume1/docker/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
    depends_on:
      - influxdb
    logging:
      driver: loki
      options:
        loki-url: "http://diskstation:3100/loki/api/v1/push"
  
  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    ports:
      - 9090:9090
    volumes:
      - /volume1/docker/prometheus/config:/etc/prometheus
      - /volume1/docker/prometheus/data:/prometheus
    user: root
    restart: always
    command: 
      - '--storage.tsdb.retention.time=1y'
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    logging:
      driver: loki
      options:
        loki-url: "http://diskstation:3100/loki/api/v1/push"
    networks:
      - monitoring

  fritzbox_exporter:
    container_name: fritzbox_exporter
    image: ckoehler99/fritzbox_exporter
    ports:
      - 9042:9042
    restart: always
    environment:
      - username=${username_fritz}
      - password=${password_fritz}
    logging:
      driver: loki
      options:
        loki-url: "http://diskstation:3100/loki/api/v1/push"
    networks:
      - monitoring

  deye-solar-exporter:
    container_name: deye-solar-exporter
    image: 	ckoehler99/deye-solar-exporter
    ports:
      - 9942:9942
    restart: always
    environment:
      - DEYE_IP=${ip_deye}
      - DEYE_USER=${username_deye}
      - DEYE_PASSWORD=${password_deye}
    logging:
      driver: loki
      options:
        loki-url: "http://diskstation:3100/loki/api/v1/push"
    networks:
      - monitoring

networks:
  backend:
    internal: true
  monitoring:
    driver: bridge
